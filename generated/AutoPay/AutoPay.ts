// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExecutedSourceChain extends ethereum.Event {
  get params(): ExecutedSourceChain__Params {
    return new ExecutedSourceChain__Params(this);
  }
}

export class ExecutedSourceChain__Params {
  _event: ExecutedSourceChain;

  constructor(event: ExecutedSourceChain) {
    this._event = event;
  }

  get _jobId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _timesExecuted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _fundsUsed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _isForwardPaying(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class FundsDeposited extends ethereum.Event {
  get params(): FundsDeposited__Params {
    return new FundsDeposited__Params(this);
  }
}

export class FundsDeposited__Params {
  _event: FundsDeposited;

  constructor(event: FundsDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundsWithdrawn extends ethereum.Event {
  get params(): FundsWithdrawn__Params {
    return new FundsWithdrawn__Params(this);
  }
}

export class FundsWithdrawn__Params {
  _event: FundsWithdrawn;

  constructor(event: FundsWithdrawn) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get initiator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class JobCreated extends ethereum.Event {
  get params(): JobCreated__Params {
    return new JobCreated__Params(this);
  }
}

export class JobCreated__Params {
  _event: JobCreated;

  constructor(event: JobCreated) {
    this._event = event;
  }

  get _taskCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _jobId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _gelatoTaskId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _to(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _fromToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get _toToken(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get _toChain(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get _destinationDomain(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get _destinationContract(): Address {
    return this._event.parameters[9].value.toAddress();
  }

  get _cycles(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }

  get _interval(): BigInt {
    return this._event.parameters[12].value.toBigInt();
  }

  get _isForwardPaying(): boolean {
    return this._event.parameters[13].value.toBoolean();
  }

  get option(): i32 {
    return this._event.parameters[14].value.toI32();
  }
}

export class JobSuccess extends ethereum.Event {
  get params(): JobSuccess__Params {
    return new JobSuccess__Params(this);
  }
}

export class JobSuccess__Params {
  _event: JobSuccess;

  constructor(event: JobSuccess) {
    this._event = event;
  }

  get txFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get execAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get execData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get taskId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get callSuccess(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class XReceiveData extends ethereum.Event {
  get params(): XReceiveData__Params {
    return new XReceiveData__Params(this);
  }
}

export class XReceiveData__Params {
  _event: XReceiveData;

  constructor(event: XReceiveData) {
    this._event = event;
  }

  get originSender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get origin(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get transferId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get receiveTimestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get senderAccount(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get receiverAccount(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class XTransferData extends ethereum.Event {
  get params(): XTransferData__Params {
    return new XTransferData__Params(this);
  }
}

export class XTransferData__Params {
  _event: XTransferData;

  constructor(event: XTransferData) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fromToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get destinationContract(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get relayerFeeInTransactingAsset(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get destinationDomain(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class AutoPay___createdJobsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    return map;
  }

  get_user(): Address {
    return this.value0;
  }

  get_totalCycles(): BigInt {
    return this.value1;
  }

  get_executedCycles(): BigInt {
    return this.value2;
  }

  get_gelatoTaskID(): Bytes {
    return this.value3;
  }
}

export class AutoPay extends ethereum.SmartContract {
  static bind(address: Address): AutoPay {
    return new AutoPay("AutoPay", address);
  }

  FEES(): BigInt {
    let result = super.call("FEES", "FEES():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEES(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FEES", "FEES():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _createdJobs(param0: Bytes): AutoPay___createdJobsResult {
    let result = super.call(
      "_createdJobs",
      "_createdJobs(bytes32):(address,uint256,uint256,bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new AutoPay___createdJobsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes()
    );
  }

  try__createdJobs(
    param0: Bytes
  ): ethereum.CallResult<AutoPay___createdJobsResult> {
    let result = super.tryCall(
      "_createdJobs",
      "_createdJobs(bytes32):(address,uint256,uint256,bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AutoPay___createdJobsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes()
      )
    );
  }

  _getAutomateJobId(
    _from: Address,
    _to: Address,
    _amount: BigInt,
    _fromToken: Address,
    _toToken: Address,
    _toChain: BigInt,
    _destinationDomain: BigInt,
    _destinationContract: Address,
    _cycles: BigInt,
    _startTime: BigInt,
    _interval: BigInt
  ): Bytes {
    let result = super.call(
      "_getAutomateJobId",
      "_getAutomateJobId(address,address,uint256,address,address,uint256,uint32,address,uint256,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_toChain),
        ethereum.Value.fromUnsignedBigInt(_destinationDomain),
        ethereum.Value.fromAddress(_destinationContract),
        ethereum.Value.fromUnsignedBigInt(_cycles),
        ethereum.Value.fromUnsignedBigInt(_startTime),
        ethereum.Value.fromUnsignedBigInt(_interval)
      ]
    );

    return result[0].toBytes();
  }

  try__getAutomateJobId(
    _from: Address,
    _to: Address,
    _amount: BigInt,
    _fromToken: Address,
    _toToken: Address,
    _toChain: BigInt,
    _destinationDomain: BigInt,
    _destinationContract: Address,
    _cycles: BigInt,
    _startTime: BigInt,
    _interval: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "_getAutomateJobId",
      "_getAutomateJobId(address,address,uint256,address,address,uint256,uint32,address,uint256,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_toChain),
        ethereum.Value.fromUnsignedBigInt(_destinationDomain),
        ethereum.Value.fromAddress(_destinationContract),
        ethereum.Value.fromUnsignedBigInt(_cycles),
        ethereum.Value.fromUnsignedBigInt(_startTime),
        ethereum.Value.fromUnsignedBigInt(_interval)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _getWeb3FunctionHash(
    _from: Address,
    _to: Address,
    _amount: BigInt,
    _fromToken: Address,
    _toToken: Address,
    _toChain: BigInt,
    _destinationDomain: BigInt,
    _destinationContract: Address,
    _cycles: BigInt,
    _startTime: BigInt,
    _interval: BigInt,
    _isForwardPaying: boolean
  ): Bytes {
    let result = super.call(
      "_getWeb3FunctionHash",
      "_getWeb3FunctionHash(address,address,uint256,address,address,uint256,uint32,address,uint256,uint256,uint256,bool):(bytes)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_toChain),
        ethereum.Value.fromUnsignedBigInt(_destinationDomain),
        ethereum.Value.fromAddress(_destinationContract),
        ethereum.Value.fromUnsignedBigInt(_cycles),
        ethereum.Value.fromUnsignedBigInt(_startTime),
        ethereum.Value.fromUnsignedBigInt(_interval),
        ethereum.Value.fromBoolean(_isForwardPaying)
      ]
    );

    return result[0].toBytes();
  }

  try__getWeb3FunctionHash(
    _from: Address,
    _to: Address,
    _amount: BigInt,
    _fromToken: Address,
    _toToken: Address,
    _toChain: BigInt,
    _destinationDomain: BigInt,
    _destinationContract: Address,
    _cycles: BigInt,
    _startTime: BigInt,
    _interval: BigInt,
    _isForwardPaying: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "_getWeb3FunctionHash",
      "_getWeb3FunctionHash(address,address,uint256,address,address,uint256,uint32,address,uint256,uint256,uint256,bool):(bytes)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_toChain),
        ethereum.Value.fromUnsignedBigInt(_destinationDomain),
        ethereum.Value.fromAddress(_destinationContract),
        ethereum.Value.fromUnsignedBigInt(_cycles),
        ethereum.Value.fromUnsignedBigInt(_startTime),
        ethereum.Value.fromUnsignedBigInt(_interval),
        ethereum.Value.fromBoolean(_isForwardPaying)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _setupAndSwap(
    _fromAsset: Address,
    _toAsset: Address,
    _amountIn: BigInt,
    _swapper: Address,
    _swapData: Bytes
  ): BigInt {
    let result = super.call(
      "_setupAndSwap",
      "_setupAndSwap(address,address,uint256,address,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(_fromAsset),
        ethereum.Value.fromAddress(_toAsset),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromAddress(_swapper),
        ethereum.Value.fromBytes(_swapData)
      ]
    );

    return result[0].toBigInt();
  }

  try__setupAndSwap(
    _fromAsset: Address,
    _toAsset: Address,
    _amountIn: BigInt,
    _swapper: Address,
    _swapData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setupAndSwap",
      "_setupAndSwap(address,address,uint256,address,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(_fromAsset),
        ethereum.Value.fromAddress(_toAsset),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromAddress(_swapper),
        ethereum.Value.fromBytes(_swapData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _web3functionHashes(param0: i32): string {
    let result = super.call(
      "_web3functionHashes",
      "_web3functionHashes(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toString();
  }

  try__web3functionHashes(param0: i32): ethereum.CallResult<string> {
    let result = super.tryCall(
      "_web3functionHashes",
      "_web3functionHashes(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _web3functionHashesNew(param0: i32): string {
    let result = super.call(
      "_web3functionHashesNew",
      "_web3functionHashesNew(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toString();
  }

  try__web3functionHashesNew(param0: i32): ethereum.CallResult<string> {
    let result = super.tryCall(
      "_web3functionHashesNew",
      "_web3functionHashesNew(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  automate(): Address {
    let result = super.call("automate", "automate():(address)", []);

    return result[0].toAddress();
  }

  try_automate(): ethereum.CallResult<Address> {
    let result = super.tryCall("automate", "automate():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkBalance(): BigInt {
    let result = super.call("checkBalance", "checkBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_checkBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("checkBalance", "checkBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  connext(): Address {
    let result = super.call("connext", "connext():(address)", []);

    return result[0].toAddress();
  }

  try_connext(): ethereum.CallResult<Address> {
    let result = super.tryCall("connext", "connext():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dedicatedMsgSender(): Address {
    let result = super.call(
      "dedicatedMsgSender",
      "dedicatedMsgSender():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dedicatedMsgSender(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dedicatedMsgSender",
      "dedicatedMsgSender():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundsOwner(): Address {
    let result = super.call("fundsOwner", "fundsOwner():(address)", []);

    return result[0].toAddress();
  }

  try_fundsOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("fundsOwner", "fundsOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gelato1Balance(): Address {
    let result = super.call("gelato1Balance", "gelato1Balance():(address)", []);

    return result[0].toAddress();
  }

  try_gelato1Balance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gelato1Balance",
      "gelato1Balance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBalanceOfToken(_address: Address): BigInt {
    let result = super.call(
      "getBalanceOfToken",
      "getBalanceOfToken(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_getBalanceOfToken(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalanceOfToken",
      "getBalanceOfToken(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  swapExactInputSingle(
    _fromToken: Address,
    _toToken: Address,
    amountIn: BigInt
  ): BigInt {
    let result = super.call(
      "swapExactInputSingle",
      "swapExactInputSingle(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(amountIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapExactInputSingle(
    _fromToken: Address,
    _toToken: Address,
    amountIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapExactInputSingle",
      "swapExactInputSingle(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(amountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapRouter(): Address {
    let result = super.call("swapRouter", "swapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapRouter", "swapRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userBalance",
      "userBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBalance",
      "userBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ATC__initializeCall extends ethereum.Call {
  get inputs(): ATC__initializeCall__Inputs {
    return new ATC__initializeCall__Inputs(this);
  }

  get outputs(): ATC__initializeCall__Outputs {
    return new ATC__initializeCall__Outputs(this);
  }
}

export class ATC__initializeCall__Inputs {
  _call: ATC__initializeCall;

  constructor(call: ATC__initializeCall) {
    this._call = call;
  }

  get _automate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fundsOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ATC__initializeCall__Outputs {
  _call: ATC__initializeCall;

  constructor(call: ATC__initializeCall) {
    this._call = call;
  }
}

export class __initializeCall extends ethereum.Call {
  get inputs(): __initializeCall__Inputs {
    return new __initializeCall__Inputs(this);
  }

  get outputs(): __initializeCall__Outputs {
    return new __initializeCall__Outputs(this);
  }
}

export class __initializeCall__Inputs {
  _call: __initializeCall;

  constructor(call: __initializeCall) {
    this._call = call;
  }

  get _automate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _taskCreator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class __initializeCall__Outputs {
  _call: __initializeCall;

  constructor(call: __initializeCall) {
    this._call = call;
  }
}

export class _cancelJobCall extends ethereum.Call {
  get inputs(): _cancelJobCall__Inputs {
    return new _cancelJobCall__Inputs(this);
  }

  get outputs(): _cancelJobCall__Outputs {
    return new _cancelJobCall__Outputs(this);
  }
}

export class _cancelJobCall__Inputs {
  _call: _cancelJobCall;

  constructor(call: _cancelJobCall) {
    this._call = call;
  }

  get _jobId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class _cancelJobCall__Outputs {
  _call: _cancelJobCall;

  constructor(call: _cancelJobCall) {
    this._call = call;
  }
}

export class _createMultipleTimeAutomateCall extends ethereum.Call {
  get inputs(): _createMultipleTimeAutomateCall__Inputs {
    return new _createMultipleTimeAutomateCall__Inputs(this);
  }

  get outputs(): _createMultipleTimeAutomateCall__Outputs {
    return new _createMultipleTimeAutomateCall__Outputs(this);
  }
}

export class _createMultipleTimeAutomateCall__Inputs {
  _call: _createMultipleTimeAutomateCall;

  constructor(call: _createMultipleTimeAutomateCall) {
    this._call = call;
  }

  get _to(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _fromToken(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _toToken(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _toChain(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _destinationDomain(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _destinationContract(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }

  get _cycles(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }

  get _startTime(): Array<BigInt> {
    return this._call.inputValues[8].value.toBigIntArray();
  }

  get _interval(): Array<BigInt> {
    return this._call.inputValues[9].value.toBigIntArray();
  }

  get _isForwardPaying(): boolean {
    return this._call.inputValues[10].value.toBoolean();
  }
}

export class _createMultipleTimeAutomateCall__Outputs {
  _call: _createMultipleTimeAutomateCall;

  constructor(call: _createMultipleTimeAutomateCall) {
    this._call = call;
  }
}

export class _createTimeAutomateCall extends ethereum.Call {
  get inputs(): _createTimeAutomateCall__Inputs {
    return new _createTimeAutomateCall__Inputs(this);
  }

  get outputs(): _createTimeAutomateCall__Outputs {
    return new _createTimeAutomateCall__Outputs(this);
  }
}

export class _createTimeAutomateCall__Inputs {
  _call: _createTimeAutomateCall;

  constructor(call: _createTimeAutomateCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _fromToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _toChain(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _destinationDomain(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _destinationContract(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _cycles(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _interval(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _isForwardPaying(): boolean {
    return this._call.inputValues[10].value.toBoolean();
  }
}

export class _createTimeAutomateCall__Outputs {
  _call: _createTimeAutomateCall;

  constructor(call: _createTimeAutomateCall) {
    this._call = call;
  }
}

export class _forceCancelGelatoCall extends ethereum.Call {
  get inputs(): _forceCancelGelatoCall__Inputs {
    return new _forceCancelGelatoCall__Inputs(this);
  }

  get outputs(): _forceCancelGelatoCall__Outputs {
    return new _forceCancelGelatoCall__Outputs(this);
  }
}

export class _forceCancelGelatoCall__Inputs {
  _call: _forceCancelGelatoCall;

  constructor(call: _forceCancelGelatoCall) {
    this._call = call;
  }

  get _gelatoTaskID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class _forceCancelGelatoCall__Outputs {
  _call: _forceCancelGelatoCall;

  constructor(call: _forceCancelGelatoCall) {
    this._call = call;
  }
}

export class _setupAndSwapCall extends ethereum.Call {
  get inputs(): _setupAndSwapCall__Inputs {
    return new _setupAndSwapCall__Inputs(this);
  }

  get outputs(): _setupAndSwapCall__Outputs {
    return new _setupAndSwapCall__Outputs(this);
  }
}

export class _setupAndSwapCall__Inputs {
  _call: _setupAndSwapCall;

  constructor(call: _setupAndSwapCall) {
    this._call = call;
  }

  get _fromAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _swapper(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _swapData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class _setupAndSwapCall__Outputs {
  _call: _setupAndSwapCall;

  constructor(call: _setupAndSwapCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _timeAutomateCronCall extends ethereum.Call {
  get inputs(): _timeAutomateCronCall__Inputs {
    return new _timeAutomateCronCall__Inputs(this);
  }

  get outputs(): _timeAutomateCronCall__Outputs {
    return new _timeAutomateCronCall__Outputs(this);
  }
}

export class _timeAutomateCronCall__Inputs {
  _call: _timeAutomateCronCall;

  constructor(call: _timeAutomateCronCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _fromToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _toChain(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _destinationDomain(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _destinationContract(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _cycles(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _interval(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }

  get _relayerFeeInTransactingAsset(): BigInt {
    return this._call.inputValues[11].value.toBigInt();
  }

  get _isForwardPaying(): boolean {
    return this._call.inputValues[12].value.toBoolean();
  }

  get _swapper(): Address {
    return this._call.inputValues[13].value.toAddress();
  }

  get _swapData(): Bytes {
    return this._call.inputValues[14].value.toBytes();
  }
}

export class _timeAutomateCronCall__Outputs {
  _call: _timeAutomateCronCall;

  constructor(call: _timeAutomateCronCall) {
    this._call = call;
  }
}

export class DirectSwapperCallCall extends ethereum.Call {
  get inputs(): DirectSwapperCallCall__Inputs {
    return new DirectSwapperCallCall__Inputs(this);
  }

  get outputs(): DirectSwapperCallCall__Outputs {
    return new DirectSwapperCallCall__Outputs(this);
  }
}

export class DirectSwapperCallCall__Inputs {
  _call: DirectSwapperCallCall;

  constructor(call: DirectSwapperCallCall) {
    this._call = call;
  }

  get _swapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get swapData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DirectSwapperCallCall__Outputs {
  _call: DirectSwapperCallCall;

  constructor(call: DirectSwapperCallCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _connext(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ops(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SwapExactInputSingleCall extends ethereum.Call {
  get inputs(): SwapExactInputSingleCall__Inputs {
    return new SwapExactInputSingleCall__Inputs(this);
  }

  get outputs(): SwapExactInputSingleCall__Outputs {
    return new SwapExactInputSingleCall__Outputs(this);
  }
}

export class SwapExactInputSingleCall__Inputs {
  _call: SwapExactInputSingleCall;

  constructor(call: SwapExactInputSingleCall) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SwapExactInputSingleCall__Outputs {
  _call: SwapExactInputSingleCall;

  constructor(call: SwapExactInputSingleCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateTreasuryCall extends ethereum.Call {
  get inputs(): UpdateTreasuryCall__Inputs {
    return new UpdateTreasuryCall__Inputs(this);
  }

  get outputs(): UpdateTreasuryCall__Outputs {
    return new UpdateTreasuryCall__Outputs(this);
  }
}

export class UpdateTreasuryCall__Inputs {
  _call: UpdateTreasuryCall;

  constructor(call: UpdateTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTreasuryCall__Outputs {
  _call: UpdateTreasuryCall;

  constructor(call: UpdateTreasuryCall) {
    this._call = call;
  }
}

export class UpdateWeb3functionHashesCall extends ethereum.Call {
  get inputs(): UpdateWeb3functionHashesCall__Inputs {
    return new UpdateWeb3functionHashesCall__Inputs(this);
  }

  get outputs(): UpdateWeb3functionHashesCall__Outputs {
    return new UpdateWeb3functionHashesCall__Outputs(this);
  }
}

export class UpdateWeb3functionHashesCall__Inputs {
  _call: UpdateWeb3functionHashesCall;

  constructor(call: UpdateWeb3functionHashesCall) {
    this._call = call;
  }

  get _types(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get _hashes(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class UpdateWeb3functionHashesCall__Outputs {
  _call: UpdateWeb3functionHashesCall;

  constructor(call: UpdateWeb3functionHashesCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class XTransferCall extends ethereum.Call {
  get inputs(): XTransferCall__Inputs {
    return new XTransferCall__Inputs(this);
  }

  get outputs(): XTransferCall__Outputs {
    return new XTransferCall__Outputs(this);
  }
}

export class XTransferCall__Inputs {
  _call: XTransferCall;

  constructor(call: XTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get destinationContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get destinationDomain(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get fromToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get toToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get slippage(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get relayerFeeInTransactingAsset(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class XTransferCall__Outputs {
  _call: XTransferCall;

  constructor(call: XTransferCall) {
    this._call = call;
  }
}
